package rslicer

import "testing"

var exampleSmall string = "üò∏üòº"                                          // len = 2
var exampleMedium string = "üò∏ Some very long string with nice unicodeüòº" // len = 42
// len = 413
var exampleLarge string = "üò∏ –ß—ë—Ä–Ω–∞—è –¥—ã—Ä–∞ÃÅ ‚Äî –æ–±–ª–∞—Å—Ç—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞-–≤—Ä–µ–º–µ–Ω–∏, –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–æ–Ω–Ω–æ–µ –ø—Ä–∏—Ç—è–∂–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–π –Ω–∞—Å—Ç–æ–ª—å–∫–æ –≤–µ–ª–∏–∫–æ, —á—Ç–æ –ø–æ–∫–∏–Ω—É—Ç—å –µ—ë –Ω–µ –º–æ–≥—É—Ç –¥–∞–∂–µ –æ–±—ä–µ–∫—Ç—ã, –¥–≤–∏–∂—É—â–∏–µ—Å—è —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é —Å–≤–µ—Ç–∞, –≤ —Ç–æ–º —á–∏—Å–ª–µ –∫–≤–∞–Ω—Ç—ã —Å–∞–º–æ–≥–æ —Å–≤–µ—Ç–∞. –ì—Ä–∞–Ω–∏—Ü–∞ —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–æ–º —Å–æ–±—ã—Ç–∏–π. –í –ø—Ä–æ—Å—Ç–µ–π—à–µ–º —Å–ª—É—á–∞–µ —Å—Ñ–µ—Ä–∏—á–µ—Å–∫–∏ —Å–∏–º–º–µ—Ç—Ä–∏—á–Ω–æ–π —á—ë—Ä–Ω–æ–π –¥—ã—Ä—ã –æ–Ω –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —Å—Ñ–µ—Ä—É —Å —Ä–∞–¥–∏—É—Å–æ–º –®–≤–∞—Ä—Ü—à–∏–ª—å–¥–∞, –∫–æ—Ç–æ—Ä—ã–π —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º —á—ë—Ä–Ω–æ–π –¥—ã—Ä—ã."

const (
	smallBegin     int = 0
	smallEnd       int = 1
	smallNegBegin  int = -2
	smallNegEnd    int = -1
	mediumBegin    int = 4
	mediumEnd      int = 18
	mediumNegBegin int = -38
	mediumNegEnd   int = -20
	largeBegin     int = 10
	largeEnd       int = 120
	largeNegBegin  int = -400
	largeNegEnd    int = -380
	largeEqual     int = 410
)

func BenchmarkPositiveSmallWithFunction(b *testing.B) {
	for i := 0; i < b.N; i++ {
		_, _, _ = GetRuneRange(exampleSmall, smallBegin, smallEnd)
	}
}
func BenchmarkNegativeSmallWithFunction(b *testing.B) {
	for i := 0; i < b.N; i++ {
		_, _, _ = GetRuneRange(exampleSmall, smallNegBegin, smallNegEnd)
	}
}

func BenchmarkPositiveMediumWithFunction(b *testing.B) {
	for i := 0; i < b.N; i++ {
		_, _, _ = GetRuneRange(exampleMedium, mediumBegin, mediumEnd)
	}
}

func BenchmarkNegativeMediumWithFunction(b *testing.B) {
	for i := 0; i < b.N; i++ {
		_, _, _ = GetRuneRange(exampleMedium, mediumNegBegin, mediumNegEnd)
	}
}

func BenchmarkPositiveLargeWithFunction(b *testing.B) {
	for i := 0; i < b.N; i++ {
		_, _, _ = GetRuneRange(exampleLarge, largeBegin, largeEnd)
	}
}

func BenchmarkNegativeLargeWithFunction(b *testing.B) {
	for i := 0; i < b.N; i++ {
		_, _, _ = GetRuneRange(exampleLarge, largeNegBegin, largeNegEnd)
	}
}

func BenchmarkNegativeLargeSliceWithFunction(b *testing.B) {
	for i := 0; i < b.N; i++ {
		_, _ = GetRuneSlice(exampleLarge, largeNegBegin, largeNegEnd)
	}
}
